;(function(exports) {
  var DIRECTIONS = ["n", "e", "s", "w", "ne", "nw", "se", "sw"];

  function Pixel(i,w,h,cnvs) {
    var that = this;
    this.index = i;
    this.width = w;
    this.height = h;
    this.neighbors = [];
    this.cnvs = cnvs;

    DIRECTIONS.map(function(d,idx){
      that.neighbors.push(that[d]());
    });
  }

  /**
    This object was created to simplify getting the
    coordinates of any of the 8 neighboring pixels
    _______________
    | NW | N | NE |
    |____|___|____|
    | W  | C | E  |
    |____|___|____|
    | SW | S | SE |
    |____|___|____|
    given the index, width and height of matrix
  **/

  Pixel.prototype.n = function(){
    // pixels are simply arrays in canvas image data
    // where 1 pixel occupies 4 consecutive elements
    // equal to r-g-b-a
    return (this.index - this.width * 4);
  };

  Pixel.prototype.e = function(){
    return (this.index + 4);
  };

  Pixel.prototype.s = function(){
    return (this.index + this.width * 4);
  };

  Pixel.prototype.w = function(){
    return (this.index - 4);
  };

  Pixel.prototype.ne = function(){
    return (this.index - this.width * 4 + 4);
  };

  Pixel.prototype.nw = function(){
    return (this.index - this.width * 4 - 4);
  };

  Pixel.prototype.se = function(){
    return (this.index + this.width * 4 + 4);
  };

  Pixel.prototype.sw = function(){
    return (this.index + this.width * 4 - 4);
  };

  Pixel.prototype.r = function(){
    return this.cnvs[this.index];
  };

  Pixel.prototype.g = function(){
    return this.cnvs[this.index+1];
  };;

  Pixel.prototype.b = function(){
    return this.cnvs[this.index+2];
  };

  Pixel.prototype.a = function(){
    return this.cnvs[this.index+3];
  };

  Pixel.prototype.isBorder = function(){
    return (this.index-(this.width*4)) < 0 ||
           (this.index%(this.width*4)) === 0 ||
           (this.index%(this.width*4)) === ((this.width*4)-4) ||
           (this.index+(this.width*4)) > (this.width*this.height*4);
  };

  exports.Pixel = Pixel;
}(this));

;(function(exports) {
  //helper functions
  exports.sumArr = function(arr) {//receives an array and returns sum
    var result = 0;
    arr.map(function(el, idx){
      result += (/^\s*function Array/.test(String(el.constructor))) ? exports.sumArr(el) : el;
    });
    return result;
  };

  exports.COLORS = {
    RED: {r: 255, g: 0, b: 0},
    GREEN: {r: 0, g: 255, b: 0},
    BLUE: {r: 0, g: 0, b: 255},
    YELLOW: {r: 255, g: 255, b: 0},
    PINK: {r: 255, g: 0, b: 255},
    AQUA: {r: 0, g: 255, b: 255}
  };

  exports.roundDir = function(deg) {//rounds degrees to 4 possible orientations: horizontal, vertical, and 2 diagonals
    var deg = deg < 0 ? deg + 180 : deg;

    if ((deg >= 0 && deg <= 22.5) || (deg > 157.5 && deg <= 180)) {
      return 0;
    } else if (deg > 22.5 && deg <= 67.5) {
      return 45;
    } else if (deg > 67.5 && deg <= 112.5) {
      return 90;
    } else if (deg > 112.5 && deg <= 157.5) {
      return 135;
    }
  };

  exports.getPixelNeighbors = function(dir) {
    var degrees = {0 : [{x:1, y:2}, {x:1, y:0}], 45 : [{x: 0, y: 2}, {x: 2, y: 0}], 90 : [{x: 0, y: 1}, {x: 2, y: 1}], 135 : [{x: 0, y: 0}, {x: 2, y: 2}]};
    return degrees[dir];
  };

  exports.getEdgeNeighbors = function(i, imgData, threshold, includedEdges) {
    var neighbors = [],
        pixel = new Pixel(i, imgData.width, imgData.height);
    for(var j = 0; j < pixel.neighbors.length; j++)
      if(imgData.data[pixel.neighbors[j]] >= threshold && (includedEdges === undefined || includedEdges.indexOf(pixel.neighbors[j]) === -1))
        neighbors.push(pixel.neighbors[j]);

    return neighbors;
  };

  exports.createHistogram = function(cvs) {
    var histogram = { g: [] },
        size = 256,
        total = 0,
        imgData = cvs.getCurrImgData();
    while(size--) histogram.g[size] = 0;
    cvs.runImg(null, function(i) {
      histogram.g[imgData.data[i]]++;
      total++;
    });
    histogram.length = total;
    return histogram;
  };

  // mean threshold works better than median threshold
  // however is sensitive to noise
  // works best when Gaussian blur is applied first
  exports.calcMeanThreshold = function(cvs) {
    var histogram = exports.createHistogram(cvs),
        sum = 0,
        total = histogram.length;
    histogram.g.forEach(function(e, i){ sum += (e*(i + 1)); });
    return sum/total;
  };

  // does not work that well
  // median value is almost always 0 (black)
  // if background is bigger than foreground
  exports.calcMedianThreshold = function(cvs) {
    var histogram = createHistogram(cvs),
        m = Math.round(histogram.length/2),
        n = 0,
        median;
    histogram.g.some(function(e, i){
      n += e;
      if (n >= m) {
        median = i;
        return true;
      } else {
        return false;
      }
    });
    return median;
  };

  exports.calcWeight = function(histogram, s, e) {
    var total = histogram.reduce(function(i, j){ return i + j; }, 0);
    var partHist = (s === e) ? [histogram[s]] : histogram.slice(s, e);
    var part = partHist.reduce(function(i, j){ return i + j; }, 0);
    return parseFloat(part, 10)/total;
  };

  exports.calcMean = function(histogram, s, e) {
    var partHist = (s === e) ? [histogram[s]] : histogram.slice(s, e);
    var val = total = 0;
    partHist.forEach(function(el, i){
      val += ((s + i) * el);
      total += el;
    });
    return parseFloat(val, 10)/total;
  };

  exports.calcBetweenClassVariance = function(weight1, mean1, weight2, mean2) {
    return weight1 * weight2 * (mean1 - mean2) * (mean1 - mean2);
  };

  exports.fastOtsu = function(canvas) {
    var histogram = exports.createHistogram(canvas);
    var start = 0;
    var end = histogram.g.length - 1;
    var leftWeight, rightWeight,
        leftMean, rightMean;
    var betweenClassVariances = [];
    var max = -Infinity, threshold;

    histogram.g.forEach(function(el, i) {
      leftWeight = exports.calcWeight(histogram.g, start, i);
      rightWeight = exports.calcWeight(histogram.g, i, end + 1);
      leftMean = exports.calcMean(histogram.g, start, i);
      rightMean = exports.calcMean(histogram.g, i, end + 1);
      betweenClassVariances[i] = exports.calcBetweenClassVariance(leftWeight, leftMean, rightWeight, rightMean);
      if (betweenClassVariances[i] > max) {
        max = betweenClassVariances[i];
        threshold = i;
      }
    });

    return threshold;
  };
}(this));

;(function(exports) {

  function Canvas(id, w, h) {
    this.elem = document.getElementById(id);
    this.width = w || 1024;
    this.height = h || 1024;
    if (this.elem === null) {
      this.elem = document.createElement('canvas');
      this.elem.id = id;
      this.elem.width = this.width;
      this.elem.height = this.height;
      document.body.insertBefore(this.elem, document.body.firstChild);
    }
    this.ctx = this.elem.getContext('2d');
    this.origImg = {};
  }

  Canvas.prototype.loadImg = function(img, sx, sy) {
    var that = this;
    var usrImg = new Image();

    usrImg.onload = function() {
      if (usrImg.width !== that.width || usrImg.height !== that.height) {
        that.width = usrImg.width;
        that.height = usrImg.height;
        that.elem.width = that.width;
        that.elem.height = that.height;
      }
      that.ctx.drawImage(usrImg, sx || 0, sy || 0);
      that.origImg.imgData = that.ctx.getImageData(0, 0, that.width, that.height);
    };
    usrImg.src = img;
  };

  Canvas.prototype.runImg = function(size, fn) {
    var that = this;

    for (var y = 0; y < this.height; y++) {
      for (var x = 0; x < this.width; x++) {
        var i = x * 4 + y * this.width * 4;
        var matrix = getMatrix(x, y, size);
        fn(i, matrix);
      }
    }

    function getMatrix(cx, cy, size) {//will generate a 2d array of sizexsize given center x, center y, size, image width & height
      if (!size) { return; }
      var matrix = [];
      for (var i = 0, y = -(size-1)/2; i < size; i++, y++) {
        matrix[i] = [];
        for (var j = 0, x = -(size-1)/2; j < size; j++, x++) {
          matrix[i][j] = (cx + x) * 4 + (cy + y) * that.width * 4;
        }
      }
      return matrix;
    }
  };

  Canvas.prototype.getOrigImgData = function() {
    var orig = this.ctx.createImageData(this.width, this.height);
    orig.data.set(this.origImg.imgData.data);
    return orig;
  };

  Canvas.prototype.getCurrImgData = function() {
    return this.ctx.getImageData(0, 0, this.width, this.height);
  };

  Canvas.prototype.setImgData = function(imgData) {
    this.ctx.putImageData(imgData, 0, 0);
  };

  Canvas.prototype.setPixel = function(i, val, imgData) {
    imgData.data[i] = typeof val == 'number'? val: val.r;
    imgData.data[i + 1] = typeof val == 'number'? val: val.g;
    imgData.data[i + 2] = typeof val == 'number'? val: val.b;
  };

  Canvas.prototype.getPixel = function(i, imgData) {
    if (i < 0 || i > imgData.data.length - 4) {
      return {r: 255, g: 255, b: 255, a: 255};
    } else {
      return this.getRGBA(i, imgData);
    }
  };

  Canvas.prototype.getRGBA = function(start, imgData) {
    return {
      r: imgData.data[start],
      g: imgData.data[start+1],
      b: imgData.data[start+2],
      a: imgData.data[start+3]
    }
  }

  exports.Canvas = Canvas;
}(this));

;(function(exports){
  var SOBEL_X_FILTER = [[-1, 0, 1],
                        [-2, 0, 2],
                        [-1, 0, 1]];
  var SOBEL_Y_FILTER = [[1, 2, 1],
                        [0, 0, 0],
                        [-1, -2, -1]];
  var ROBERTS_X_FILTER = [[1, 0],
                          [0, -1]];
  var ROBERTS_Y_FILTER = [[0, 1],
                          [-1, 0]];
  var PREWITT_X_FILTER = [[-1, 0, 1],
                          [-1, 0, 1],
                          [-1, 0, 1]];
  var PREWITT_Y_FILTER = [[-1, -1, -1],
                          [0, 0, 0],
                          [1, 1, 1]];

  var OPERATORS = { "sobel": {
                      x: SOBEL_X_FILTER,
                      y: SOBEL_Y_FILTER,
                      len: SOBEL_X_FILTER.length
                    },
                    "roberts": {
                      x: ROBERTS_X_FILTER,
                      y: ROBERTS_Y_FILTER,
                      len: ROBERTS_Y_FILTER.length
                    },
                    "prewitt": {
                      x: PREWITT_X_FILTER,
                      y: PREWITT_Y_FILTER,
                      len: PREWITT_Y_FILTER.length
                    }
                  };

  function Canny(canvElem) {
    this.canvas = canvElem;
  }

  //find intensity gradient of image
  Canny.prototype.gradient = function(op) {
    var imgData = this.canvas.getCurrImgData(),
        imgDataCopy = this.canvas.getCurrImgData(),
        dirMap = [],
        gradMap = [],
        that = this;

    console.time('Sobel Filter Time');
    this.canvas.runImg(3, function(current, neighbors) {
      var edgeX = edgeY = 0,
          pixel = new Pixel(current, imgDataCopy.width, imgDataCopy.height);

      if (!pixel.isBorder()) {
        for (var i = 0; i < OPERATORS[op].len; i++) {
          for (var j = 0; j < OPERATORS[op].len; j++) {
            edgeX += imgData.data[neighbors[i][j]] * OPERATORS[op]["x"][i][j];
            edgeY += imgData.data[neighbors[i][j]] * OPERATORS[op]["y"][i][j];
          }
        }
      }

      dirMap[current] = roundDir(Math.atan2(edgeY, edgeX) * (180/Math.PI));;
      gradMap[current] = Math.round(Math.sqrt(edgeX * edgeX + edgeY * edgeY));

      that.canvas.setPixel(current, gradMap[current], imgDataCopy);
    });
    console.timeEnd('Sobel Filter Time');

    this.canvas.dirMap = dirMap;
    this.canvas.gradMap = gradMap;
    return imgDataCopy;
  };

  Canny.prototype.nonMaximumSuppress = function() {
    var imgDataCopy = this.canvas.getCurrImgData(),
        that = this;

    console.time('NMS Time');
    this.canvas.runImg(3, function(current, neighbors) {
      var pixNeighbors = getPixelNeighbors(that.canvas.dirMap[current]);

      //pixel neighbors to compare
      var pix1 = that.canvas.gradMap[neighbors[pixNeighbors[0].x][pixNeighbors[0].y]];
      var pix2 = that.canvas.gradMap[neighbors[pixNeighbors[1].x][pixNeighbors[1].y]];

      if (pix1 > that.canvas.gradMap[current] ||
          pix2 > that.canvas.gradMap[current] ||
          (pix2 === that.canvas.gradMap[current] &&
          pix1 < that.canvas.gradMap[current])) {
        that.canvas.setPixel(current, 0, imgDataCopy);
      }
    });
    console.timeEnd('NMS Time');

    return imgDataCopy;
  };

  //mark strong and weak edges, discard others as false edges; only keep weak edges that are connected to strong edges
  Canny.prototype.hysteresis = function(){
    var that = this,
        imgDataCopy = this.canvas.getCurrImgData(),
        realEdges = [], //where real edges will be stored with the 1st pass
        t1 = fastOtsu(this.canvas), //high threshold value
        t2 = t1/2; //low threshold value

    //first pass
    console.time('Hysteresis Time');
    this.canvas.runImg(null, function(current) {
      if (imgDataCopy.data[current] > t1 && realEdges[current] === undefined) {//accept as a definite edge
        var group = that._traverseEdge(current, imgDataCopy, t2, []);
        for(var i = 0; i < group.length; i++){
          realEdges[group[i]] = true;
        }
      }
    });

    //second pass
    this.canvas.runImg(null, function(current) {
      if (realEdges[current] === undefined) {
        that.canvas.setPixel(current, 0, imgDataCopy);
      } else {
        that.canvas.setPixel(current, 255, imgDataCopy);
      }
    });
    console.timeEnd('Hysteresis Time');

    return imgDataCopy;
  };

  Canny.prototype.showDirMap = function() {//just a quick function to look at the direction results
    var that = this,
        imgDataCopy = this.canvas.getCurrImgData();
    this.canvas.runImg(null, function(i) {
      switch(that.canvas.dirMap[i]){
        case 0:
          that.canvas.setPixel(i, COLORS.RED, imgDataCopy);
          break;
        case 45:
          that.canvas.setPixel(i, COLORS.GREEN, imgDataCopy);
          break;
        case 90:
          that.canvas.setPixel(i, COLORS.BLUE, imgDataCopy);
          break;
        case 135:
          that.canvas.setPixel(i, COLORS.YELLOW, imgDataCopy);
          break;
        default:
          that.canvas.setPixel(i, COLORS.PINK, imgDataCopy);
      }
    });
    return imgDataCopy;
  };

  Canny.prototype.showGradMap = function() {
    var that = this,
        imgDataCopy = this.canvas.getCurrImgData();
    this.canvas.runImg(null, function(i) {
      if (that.canvas.gradMap[i] < 0) {
        that.canvas.setPixel(i, COLORS.RED, imgDataCopy);
      } else if (that.canvas.gradMap[i] < 200) {
        that.canvas.setPixel(i, COLORS.GREEN, imgDataCopy);
      } else if (that.canvas.gradMap[i] < 400) {
        that.canvas.setPixel(i, COLORS.BLUE, imgDataCopy);
      } else if (that.canvas.gradMap[i] < 600) {
        that.canvas.setPixel(i, COLORS.YELLOW, imgDataCopy);
      } else if (that.canvas.gradMap[i] < 800) {
        that.canvas.setPixel(i, COLORS.AQUA, imgDataCopy);
      } else {
        that.canvas.setPixel(i, COLORS.PINK, imgDataCopy);
      }
    });
    return imgDataCopy;
  };

  Canny.prototype._traverseEdge = function(current, imgData, threshold, traversed) {//traverses the current pixel until a length has been reached
    var group = [current]; //initialize the group from the current pixel's perspective
    var neighbors = getEdgeNeighbors(current, imgData, threshold, traversed);//pass the traversed group to the getEdgeNeighbors so that it will not include those anymore
    for(var i = 0; i < neighbors.length; i++){
      group = group.concat(this._traverseEdge(neighbors[i], imgData, threshold, traversed.concat(group)));//recursively get the other edges connected
    }
    return group; //if the pixel group is not above max length, it will return the pixels included in that small pixel group
  };

  exports.Canny = Canny;
}(this));